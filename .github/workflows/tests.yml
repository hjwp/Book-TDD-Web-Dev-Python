---
name: Book tests

on:
  push:
    branches:
      main
  pull_request:

jobs:
  chapter-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_chapter: [
          test_chapter_01,
          test_chapter_02_unittest,
          test_chapter_03_unit_test_first_view,
          test_chapter_04_philosophy_and_refactoring,
          test_chapter_05_post_and_database,
          test_chapter_06_explicit_waits_1,
          test_chapter_07_working_incrementally,
          test_chapter_08_prettification,
          # test_chapter_09_docker,
          # test_chapter_10_production_readiness,
          # test_chapter_11_ansible,
          test_chapter_12_organising_test_files,
          test_chapter_13_database_layer_validation,
          test_chapter_14_simple_form,
          test_chapter_15_advanced_forms,
          test_chapter_16_javascript,
          test_chapter_18_spiking_custom_auth,
          test_chapter_19_mocking,
          test_chapter_20_fixtures_and_wait_decorator,
          test_chapter_21_server_side_debugging,
          test_chapter_22_outside_in,
          unit-test,
        ]

    env:
      PY_COLORS: "1"  # enable coloured output in pytest

    steps:
      - uses: actions/checkout@v4
          # submodules: recursive
          # fetch-depth: 0

      - name: checkout submodules
        shell: bash
        run: |
          sed -i 's_git@github.com:_https://github.com/_' .gitmodules
          git submodule init
          git submodule status | cut -d" " -f2 | xargs -n1 -P0 git submodule update

      - name: warm up docker image
        run: |
          docker run --rm \
            --mount type=volume,source=rootmount,target=/root \
            --mount type=bind,source=./,target=/app \
            -t hjwp/obeythetestinggoat-book-tester:latest \
            bash -c "echo hello world"

      - name: uv create virtualenv in mounted /app folder at .venv and install latest/upgraded deps
        # todo, replace with make docker-venv?
        run: |
          docker run --rm \
            --mount type=volume,source=rootmount,target=/root \
            --mount type=bind,source=./,target=/app \
            -t hjwp/obeythetestinggoat-book-tester:latest \
            bash -c "uv venv && uv pip install --upgrade ."

      - name: git mark dirs safe (due to volume mount perms issue)
        run: |
          docker run --rm \
            --mount type=volume,source=rootmount,target=/root \
            --mount type=bind,source=./,target=/app \
            -t hjwp/obeythetestinggoat-book-tester:latest \
            bash -c "git config --global --add safe.directory '*'"
          docker run --rm \
            --mount type=volume,source=rootmount,target=/root \
            --mount type=bind,source=./,target=/app \
            -t hjwp/obeythetestinggoat-book-tester:latest \
            bash -c "cat ~/.gitconfig"

      - name: run chapter tests
        # todo, replace with make docker_${{ matrix.test_chapter }} ?
        run: |
          docker run --rm \
            --mount type=volume,source=rootmount,target=/root \
            --mount type=bind,source=./,target=/app \
            -t hjwp/obeythetestinggoat-book-tester:latest \
            bash -c "make  ${{ matrix.test_chapter }}"

      - name: Save tempdir path to an env var
        if: always()
        shell: bash
        run: |
          TMPDIR_PATH=$(cat .tmpdir.${{ matrix.test_chapter }})
          echo "TMPDIR_PATH=$TMPDIR_PATH" >> $GITHUB_ENV

      - name: Archive the temp dir
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-source-${{ matrix.test_chapter }}
          path: ${{ env.TMPDIR_PATH }}

      - name: Archive the built html files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: built-html-${{ matrix.test_chapter }}
          path: |
            *.html
            *.css


