[[appendix1]]
[appendix]
PythonAnywhere
--------------

Are you planning to use PythonAnywhere to follow along with this book? Here's a
few notes on how to get things working, specifically with regards to Selenium /
Firefox tests, running the test server, and screenshots.

If you haven't already, you'll need to sign up for a PythonAnywhere account.
A free one should be fine.


Running Firefox Selenium sessions with pyVirtualDisplay
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PythonAnywhere is a console-only environment, so it
doesn't have a display in which to pop up Firefox.  But we can use a virtual
display.

In chapter 1, <<first-FT,when we write our first ever test>>, you'll find
things don't work as expected.  The first test looks like this, and you can
type it in using the PythonAnywhere editor just fine:

[source,python]
----
from selenium import webdriver
browser = webdriver.Firefox()
browser.get('http://localhost:8000')
assert 'Django' in browser.title
----

But when you try and run it (in a **Bash console**), you'll get an error:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
Traceback (most recent call last):
File "tests.py", line 3, in <module>
browser = webdriver.Firefox()
File "/usr/local/lib/python3.3/site-packages/selenium/webdriver/firefox/webdriver.py", line 58, in __init__
self.binary, timeout),
File "/usr/local/lib/python3.3/site-packages/selenium/webdriver/firefox/extension_connection.py", line 47, in __init__
self.binary.launch_browser(self.profile)
File "/usr/local/lib/python3.3/site-packages/selenium/webdriver/firefox/firefox_binary.py", line 48, in launch_browser
self._wait_until_connectable()
File "/usr/local/lib/python3.3/site-packages/selenium/webdriver/firefox/firefox_binary.py", line 90, in _wait_until_connectable
self._get_firefox_output())
selenium.common.exceptions.WebDriverException: Message: 'The browser appears to have exited before we could connect. The output was: Error: no display specified\n' 
----

The fix is to use 'pyVirtualDisplay', which will magically start up a virtual
display using an Xvfb framebuffer:

[source,python]
----
from selenium import webdriver
from pyvirtualdisplay import Display

display = Display()
display.start()

browser = webdriver.Firefox()

try:
    browser.get('http://localhost:8000')
    assert 'Django' in browser.title

finally:
    browser.quit()
    display.stop()
----

Running that gives us our expected failure

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
Traceback (most recent call last):
File "tests.py", line 11, in <module>
assert 'Django' in browser.title
AssertionError
----


Setting up Django as a PythonAnywhere web app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Shortly after that, we set up Django.  Rather than using the 
`django-admin.py startproject` command, I recommend you use the PythonAnywhere
quick-start option in the **Web** tab.  Add a new web app, choose Django,
Python 3, and then use 'superlists' as the project name.

Then, instead of running the test server from a console on `localhost:8000`,
you can use the real URL of your PythonAnywhere web app:

[source,python]
----
    browser.get('http://my-username.pythonanywhere.com')
----


That should work better. 
footnote:[you 'could' run the Django dev server from a console instead, but the 
problem is that PythonAnywhere consoles don't always run on the same server,
so there's no guarantee that the console you're running your tests in is the
same as the one you're running the server in. Plus, when it's running in the
console, there's no easy way of visually inspecting how the site looks.]


NOTE: You'll need to remember to hit "Reload Web App" whenever you make changes
to the code, to update the site.


Cleaning up /tmp
~~~~~~~~~~~~~~~~

Selenium and Xvfb tend to leave a lot of junk lying around in '/tmp',
especially when they're not shut down tidily (that's why I included
a `try/finally` earlier).

In fact they leave so much stuff lying around that they might max out
your storage quota. So do a tidy-up in /tmp every so often:

[subs="specialcharacters,quotes"]
----
$ *rm -rf /tmp/**
----


Screenshots
~~~~~~~~~~~

In chapter 5, I suggest using a `time.sleep` to pause the FT as it runs, so 
that we can see what the selenium browser is showing on screen.  We can't do
that on PythonAnywhere, because the browser runs in a virtual display.
Instead, you can inspect the live site, or you could "take my word for it"
regarding what you should see.

The best way of doing visual inspections of tests that run in a virtual display
is to use screenshots.  Take a look at chapter 17 if you're curious, there's
some example code in there.


NOTE: If you are using PythonAnywhere to follow through with the book, I'd love
to hear how you get on!  Do send me an email, obeythetestinggoat@gmail.com

