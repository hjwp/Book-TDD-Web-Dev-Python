[[appendix4]]
[appendix]
== What to Do Next

((("Test-Driven Development (TDD)", "future investigations", id="TDDfuture35")))
Here I offer a few suggestions for things to investigate next,
to develop your testing skills,
and to apply them to some of the cool new technologies in web development
(at the time of writing!).

I might write an article about some of these in the future.
But why not try to beat me to it,
and write your own blog post chronicling your attempt at any one of these?

((("getting help")))
I'm very happy to answer questions and provide tips and guidance
on all these topics,
so if you find yourself attempting one and getting stuck,
please don't hesitate to get in touch at obeythetestinggoat@gmail.com!



=== Switch to Postgres

SQLite is a wonderful little database, but it won't deal well once you
have more than one web worker process fielding your site's requests.
Postgres is everyone's favourite database these days,
so find out how to install and configure it.

You'll need to figure out a place to store the usernames and passwords
for your local, staging, and production Postgres servers.
Take a look at <<chapter_12_ansible>> for inspiration.

Experiment with keeping your unit tests running with SQLite,
and compare how much faster they are than running against Postgres.
Set it up so that your local machine uses SQLite for testing,
but your CI server uses Postgres.

Does any of your functionality actually depend on Postgres-specific features?
What should you do then?


=== Run Your Tests Against Different Browsers

Selenium supports all sorts of different browsers,
including Chrome, Safari, and Internet Exploder.
Try them all out and see if your FT suite behaves any differently.

In my experience, switching browsers tends to expose all sorts of race
conditions in Selenium tests, and you will probably need to use the
interaction/wait pattern a lot more.



=== The Django Admin Site

Imagine a story where a user emails you wanting to "claim" an anonymous list.
Let's say we implement a manual solution to this,
involving the site administrator manually changing the record using the Django admin site.

Find out how to switch on the admin site, and have a play with it.
Write an FT that shows a normal, nonâ€“logged-in user creating a list,
then have an admin user log in, go to the admin site, and assign the list to the user.
The user can then see it in their "My Lists" page.



=== Write Some Security Tests

Expand on the login, my lists, and sharing tests--what do you need to write to
assure yourself that users can only do what they're authorized to?



=== Test for Graceful Degradation

What would happen if our email server goes down?
Can we at least show an apologetic error message to our users?



=== Caching and Performance Testing


Find out how to install and configure `memcached`.
Find out how to use Apache's `ab` to run a performance test.
How does it perform with and without caching?
Can you write an automated test that will fail if caching is not enabled?
What about the dreaded problem of cache invalidation?
Can tests help you to make sure your cache invalidation logic is solid?



=== JavaScript Frameworks

Check out React, Vue.js, or perhaps my old favourite, Elm.




=== Async and Websockets

Supposing two users are working on the same list at the same time.
Wouldn't it be nice to see real-time updates,
so if the other person adds an item to the list, you see it immediately?
A persistent connection between client and server using websockets
is the way to get this to work.

Check out Django's aysnc features see if you can them to implement dynamic notifications.

To test it, you'll need two browser instances
(like we used for the list sharing tests),
and check that notifications of the actions from one appear in the other,
without needing to refresh the page...



=== Switch to Using pytest


`pytest` lets you write unit tests with less boilerplate.
Try converting some of your unit tests to using 'py.test'.
You may need to use a plugin to get it to play nicely with Django.


=== Check Out coverage.py

Ned Batchelder's `coverage.py` will tell you what your 'test coverage' is--what
percentage of your code is covered by tests.
Now, in theory, because we've been using rigorous TDD,
we should always have 100% coverage.
But it's nice to know for sure,
and it's also a very useful tool for working on projects
that didn't have tests from the beginning.


=== Client-Side Encryption

Here's a fun one: what if our users are paranoid about the NSA, and decide they
no longer want to trust their lists to The Cloud?  Can you build a JavaScript
encryption system, where the user can enter a password to encypher their list
item text before it gets sent to the server?

One way of testing it might be to have an "administrator" user that goes to
the Django admin view to inspect users' lists, and checks that they are stored
encrypted in the database.



=== Your Suggestion Here

What do you think I should put here?
Suggestions, please!
((("", startref="TDDfuture35")))

