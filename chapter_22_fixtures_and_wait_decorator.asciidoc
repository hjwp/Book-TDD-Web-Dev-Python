[[chapter_22_fixtures_and_wait_decorator]]
== Test Fixtures and a Decorator for [keep-together]#Explicit Waits#

.A Note for Early Release Readers
****
With Early Release ebooks, you get books in their earliest form—the author's raw and unedited content as they write—so you can take advantage of these technologies long before the official release of these titles.

This will be the 22nd chapter of the final book. The GitHub repo is available at https://github.com/hjwp/book-example.

If you have comments about how we might improve the content and/or examples in this book, or if you notice missing material within this chapter, please reach out to the author at obeythetestinggoat@gmail.com.
****

.Warning, Chapter Recently Updated
*******************************************************************************
Warning, this Chapter is freshly updated for Django 5 + Python 3.13.

The code listings should have valid syntax,
and I've been through and sense-checked the chapter text,
but a few things might still be off!
So let me know what you think of the chapter, via obeythetestinggoat@gmail.com
*******************************************************************************

((("authentication", "skipping in FTs")))
Now that we have a functional authentication system, we want to use it to identify users,
and be able to show them all the lists they have created.

To do that, we're going to have to write FTs that have a logged-in user.
Rather than making each test go through the (time-consuming) login email dance,
we want to be able to skip that part.

This is about separation of concerns.
Functional tests aren't like unit tests,
in that they don't usually have a single assertion.
But, conceptually, they should be testing a single thing.
There's no need for every single FT to test the login/logout mechanisms.
If we can figure out a way to "cheat" and skip that part,
we'll spend less time waiting for duplicated test paths.

TIP: Don't overdo de-duplication in FTs.
      One of the benefits of an FT is that
      it can catch strange and unpredictable interactions
      between different parts of your application.

In this short chapter, we'll start writing our new FT,
and use that as an opportunity to talk about deduplication using test fixtures for FTs.
We'll also refactor out a nice helper for explicit waits,
using Python's lovely decorator syntax.


=== Skipping the Login Process by Pre-creating a Session

((("sessions, pre-creating", id="sessions20")))
((("login process, skipping", seealso="authentication")))
((("cookies")))
It's quite common for a user to return to a site and still have a cookie,
which means they are "pre-authenticated",
so this isn't an unrealistic cheat at all.
Here's how you can set it up:

[role="sourcecode"]
.src/functional_tests/test_my_lists.py (ch22l001)
====
[source,python]
----
from django.conf import settings
from django.contrib.auth import BACKEND_SESSION_KEY, SESSION_KEY, get_user_model
from django.contrib.sessions.backends.db import SessionStore

from .base import FunctionalTest

User = get_user_model()


class MyListsTest(FunctionalTest):
    def create_pre_authenticated_session(self, email):
        user = User.objects.create(email=email)
        session = SessionStore()
        session[SESSION_KEY] = user.pk # <1>
        session[BACKEND_SESSION_KEY] = settings.AUTHENTICATION_BACKENDS[0]
        session.save()
        ## to set a cookie we need to first visit the domain.
        ## 404 pages load the quickest!
        self.browser.get(self.live_server_url + "/404_no_such_url/")
        self.browser.add_cookie(
            dict(
                name=settings.SESSION_COOKIE_NAME,
                value=session.session_key,  # <2>
                path="/",
            )
        )
----
====

<1> We create a session object in the database.  The session key is the
    primary key of the user object (which is actually the user's email address).
// CSANAD: there is a different suggested way of importing SessionStore, using
// the SESSION_ENGINE from the `settings`:
// https://docs.djangoproject.com/en/5.2/topics/http/sessions/#using-sessions-out-of-views

<2> We then add a cookie to the browser that matches the session on the
    server--on our next visit to the site, the server should recognise
    us as a logged-in user.


Note that, as it is, this will only work because we're using `LiveServerTestCase`,
so the `User` and `Session` objects we create will end up in the same database
as the test server.
At some point we'll need to think about how this will work against Docker or staging.


[role="pagebreak-before less_space"]
.Django Sessions: How a User's Cookies Tell the Server She Is Authenticated
**********************************************************************

_Being an attempt to explain sessions, cookies, and authentication in Django._

((("authentication", "cookies and")))
HTTP is a "stateless" protocol,
meaning that the protocol itself doesn't keep track of any state from one
request to the next, and each request is independent from the next.
There's no built-in way to tell that a series of request come from the same client.

For this reason, servers need a way of recognising different clients with _every single request_.
The usual solution is to give each client a unique session ID,
which the browser will store in a text file called a "cookie",
and send with every request.

The server will store that ID somewhere (by default, in the database),
and then it can recognise each request that comes in
as being from a particular client.

If you log in to the site using the dev server,
you can actually take a look at your session ID by hand if you like.
It's stored under the key `sessionid` by default.
See <<session-cookie-screenshot>>.

[[session-cookie-screenshot]]
.Examining the session cookie in the Devtools UI
image::images/tdd3_2201.png["A browser with the devtools open, showing a session cookie called sessionid for localhost:800"]


These session cookies are set for all visitors to a Django site,
whether they're logged in or not.

When we want to recognise a client as being a logged-in and authenticated user,
again, rather than asking the client to send their username and password
with every single request,
the server can actually just mark that client's session as being an authenticated session,
and associate it with a user ID in its database.

A Django session is a dictionary-like data structure,
and the user ID is stored under the key given by `django.contrib.auth.SESSION_KEY`.
You can check this out in a [keep-together]#`./manage.py`# `shell` if you like:

[role="skipme small-code"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python src/manage.py shell*]
[...]
In [1]: from django.contrib.sessions.models import Session

# substitute your session id from your browser cookie here
In [2]: session = Session.objects.get(
    session_key="8u0pygdy9blo696g3n4o078ygt6l8y0y"
)

In [3]: print(session.get_decoded())
{'_auth_user_id': 'obeythetestinggoat@gmail.com', '_auth_user_backend':
'accounts.authentication.PasswordlessAuthenticationBackend'}
----

You can also store any other information you like on a user's session,
as a way of temporarily keeping track of some state.
This works for non–logged-in users too.
Just use `request.session` inside any view, and it works as a dict.
There's more information in the
https://docs.djangoproject.com/en/5.2/topics/http/sessions/[Django docs on sessions].

**********************************************************************


==== Checking That It Works

To check that `create_pre_authenticated_session()`  system works,
it would be good to use some of the code from our previous test.
Let's make a couple of functions
called `wait_to_be_logged_in` and `wait_to_be_logged_out`.
To access them from a different test,
we'll need to pull them up into `FunctionalTest`.
We'll also tweak them slightly so that they can take an arbitrary email address
as a parameter:

[role="sourcecode"]
.src/functional_tests/base.py (ch22l002)
====
[source,python]
----
class FunctionalTest(StaticLiveServerTestCase):
    [...]

    def wait_to_be_logged_in(self, email):
        self.wait_for(
            lambda: self.browser.find_element(By.CSS_SELECTOR, "#id_logout"),
        )
        navbar = self.browser.find_element(By.CSS_SELECTOR, ".navbar")
        self.assertIn(email, navbar.text)

    def wait_to_be_logged_out(self, email):
        self.wait_for(
            lambda: self.browser.find_element(By.CSS_SELECTOR, "input[name=email]")
        )
        navbar = self.browser.find_element(By.CSS_SELECTOR, ".navbar")
        self.assertNotIn(email, navbar.text)
----
====


Hm, that's not bad, but I'm not quite happy
with the amount of duplication of `wait_for` stuff in here.
Let's make a note to come back to it,
and get these helpers working.

[role="scratchpad"]
*****
* 'Clean up wait_for stuff in base.py'
*****


First we use them in 'test_login.py':


[role="sourcecode"]
.src/functional_tests/test_login.py (ch22l003)
====
[source,python]
----
    def test_login_using_magic_link(self):
        [...]
        # she is logged in!
        self.wait_to_be_logged_in(email=TEST_EMAIL)

        # Now she logs out
        self.browser.find_element(By.CSS_SELECTOR, "#id_logout").click()

        # She is logged out
        self.wait_to_be_logged_out(email=TEST_EMAIL)
----
====

Just to make sure we haven't broken anything, we rerun the login test:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python src/manage.py test functional_tests.test_login*]
[...]
OK
----

And now we can write a placeholder for the "My Lists" test,
to see if our pre-authenticated session creator really does work:

[role="sourcecode"]
.src/functional_tests/test_my_lists.py (ch22l004)
====
[source,python]
----
    def test_logged_in_users_lists_are_saved_as_my_lists(self):
        email = "edith@example.com"
        self.browser.get(self.live_server_url)
        self.wait_to_be_logged_out(email)

        # Edith is a logged-in user
        self.create_pre_authenticated_session(email)
        self.browser.get(self.live_server_url)
        self.wait_to_be_logged_in(email)
----
====

That gets us:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python src/manage.py test functional_tests.test_my_lists*]
[...]
OK
----

((("", startref="sessions20")))
That's a good place for a commit:

[subs="specialcharacters,quotes"]
----
$ *git add src/functional_tests*
$ *git commit -m "test_my_lists: precreate sessions, move login checks into base"*
----




.JSON Test Fixtures Considered Harmful
*******************************************************************************
((("JSON fixtures")))
((("fixtures", "JSON fixtures")))
((("test fixtures")))
When we pre-populate the database with test data,
as we've done here with the `User` object and its associated `Session` object,
what we're doing is setting up what's called a "test fixture".

If you look up "Django fixtures",
you'll find that Django has a built in way of saving objects
from your database using JSON (using `manage.py dumpdata`),
and automatically loading them in your test runs
using the `fixtures` class attribute on `TestCase`.

You'll find people out there saying http://bit.ly/1kSTyrb[don't use JSON fixtures],
and I tend to agree.
They're a nightmare to maintain when your model changes.
Plus it's difficult for the reader
to tell which of the many attribute values specified in the JSON
are critical for the behaviour under test, and which are just filler.
Finally, even if tests start out sharing fixtures,
sooner or later one test will want slightly different versions of the data,
and you end up copying the whole thing around to keep them isolated,
and again it's hard to tell what's relevant to the test and what is just happenstance.

It's usually much more straightforward to just load the data directly
using the Django ORM.

TIP: Once you have more than a handful of fields on a model,
    and/or several related models,
    you'll want to factor out some nice helper methods with descriptive names
    to build out your data.
    A lot of people also like
    https://factoryboy.readthedocs.org/[`factory_boy`],
    but I think the most important thing is the descriptive names.


*******************************************************************************


=== Our Final Explicit Wait Helper: A Wait Decorator

((("decorators", "wait decorator", id="Dwait20")))
((("explicit and implicit waits", id="exp20")))
((("implicit and explicit waits", id="imp20")))
((("helper methods", id="help20")))
((("wait_for_row_in_list_table helper method")))
((("self.wait_for helper method")))
((("wait_to_be_logged_in/out")))
We've used decorators a few times in our code so far,
but it's time to learn how they actually work by making one of our own.

First, let's imagine how we might want our decorator to work.
It would be nice to be able to replace all the custom wait/retry/timeout logic
in `wait_for_row_in_list_table()` and the inline `self.wait_fors()`
in the `wait_to_be_logged_in/out`.
Something like this would look lovely:

// TODO: there's a change to the rows= here, backport.
// DAVID: I didn't realise that I was meant to paste this in yet -
// be more explicit?

[role="sourcecode"]
.src/functional_tests/base.py (ch22l005)
====
[source,python]
----
    @wait
    def wait_for_row_in_list_table(self, row_text):
        rows = self.browser.find_elements(By.CSS_SELECTOR, "#id_list_table tr")
        self.assertIn(row_text, [row.text for row in rows])

    @wait
    def wait_to_be_logged_in(self, email):
        self.browser.find_element(By.CSS_SELECTOR, "#id_logout")
        navbar = self.browser.find_element(By.CSS_SELECTOR, ".navbar")
        self.assertIn(email, navbar.text)

    @wait
    def wait_to_be_logged_out(self, email):
        self.browser.find_element(By.CSS_SELECTOR, "input[name=email]")
        navbar = self.browser.find_element(By.CSS_SELECTOR, ".navbar")
        self.assertNotIn(email, navbar.text)
----
====


Are you ready to dive in?
Although decorators are quite difficult to wrap your head around
(I know it took me a long time before I was comfortable with them,
and I still have to think about them quite carefully whenever I make one),
the nice thing is that we've already dipped our toes into functional programming
in our `self.wait_for()` helper function.
That's a function that takes another function as an argument,
and a decorator is the same.
The difference is that the decorator doesn't actually execute any code itself--it
returns a modified version of the function that it was given.

Our decorator wants to return a new function
which will keep retrying the function being decorated,
catching our usual exceptions,
until a timeout occurs.
Here's a first cut:


[role="sourcecode"]
.src/functional_tests/base.py (ch22l006)
====
[source,python]
----
def wait(fn):  #<1>
    def modified_fn():  #<3>
        start_time = time.time()
        while True:  #<4>
            try:
                return fn()  #<5>
            except (AssertionError, WebDriverException) as e:  #<4>
                if time.time() - start_time > MAX_WAIT:
                    raise e
                time.sleep(0.5)

    return modified_fn  #<2>
----
====
// JAN: Why not use functools.wraps here?

<1> A decorator is a way of modifying a function;
    it takes a function as an [keep-together]#argument...#

<2> ...and returns another function as the modified (or "decorated") version.

<3> Here's where we define our modified function.

<4> And here's our familiar loop, which will keep going, catching the usual
    exceptions, until our timeout expires.

<5> And as always, we call our function and return immediately if there are
    no [keep-together]#exceptions#.

//IDEA: discuss the fact that multiple calls to fn() may have side-effects?

That's _almost_ right, but not quite;  try running it?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python src/manage.py test functional_tests.test_my_lists*]
[...]
    self.wait_to_be_logged_out(email)
TypeError: wait.<locals>.modified_fn() takes 0 positional arguments but 2 were
given
----


Unlike in `self.wait_for`, the decorator is being applied to functions
that have [keep-together]#arguments#:



[role="sourcecode currentcontents"]
.src/functional_tests/base.py
====
[source,python]
----
    @wait
    def wait_to_be_logged_in(self, email):
        self.browser.find_element(By.CSS_SELECTOR, "#id_logout")
        [...]
----
====

`wait_to_be_logged_in` takes `self` and `email` as positional arguments.
But when it's decorated, it's replaced with `modified_fn`,
which currently takes no arguments.
How do we magically make it so our `modified_fn` can handle the same arguments
as whatever `fn` the decorator gets given has?

The answer is a bit of Python magic,
+++<code>*args</code>+++ and +++<code>**kwargs</code>+++, more formally known as
https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists["variadic arguments"],
apparently (I only just learned that):



[role="sourcecode"]
.src/functional_tests/base.py (ch22l007)
====
[source,python]
----
def wait(fn):
    def modified_fn(*args, **kwargs):  #<1>
        start_time = time.time()
        while True:
            try:
                return fn(*args, **kwargs)  #<2>
            except (AssertionError, WebDriverException) as e:
                if time.time() - start_time > MAX_WAIT:
                    raise e
                time.sleep(0.5)

    return modified_fn
----
====

<1> Using +++<code>*args</code>+++ and +++<code>**kwargs</code>+++, we specify that `modified_fn()`
    may take any arbitrary positional and keyword arguments.

<2> As we've captured them in the function definition,
    we make sure to pass those same arguments to `fn()` when we actually call it.

One of the fun things this can be used for is to make a decorator
that changes the arguments of a function.  But we won't get into that now.
The main thing is that our decorator now works!

// SEBASTIAN: that's actually an awful idea, making it harder to leverage type hints. I wouldn't be giving people such ideas :D


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python src/manage.py test functional_tests.test_my_lists*]
[...]
OK
----


And do you know what's truly satisfying?
We can use our `wait` decorator for our `self.wait_for` helper as well!
Like this:


[role="sourcecode"]
.src/functional_tests/base.py (ch22l008)
====
[source,python]
----
    @wait
    def wait_for(self, fn):
        return fn()
----
====


Lovely!  Now all our wait/retry logic is encapsulated in a single place,
and we have a nice easy way of applying those waits,
either inline in our FTs using `self.wait_for()`,
or on any helper function using the `@wait` decorator.

Let's just check all the FTs still pass of course:

----
Ran 8 tests in 19.379s

OK
----


Do a commit, and we're good to cross of that scratchpad item:

[role="scratchpad"]
*****
* '[strikethrough line-through]#Clean up wait_for stuff in base.py#'
*****


In the next chapter we'll try to deploy our code to staging,
and use the pre-authenticated session fixtures on the server.
As we'll see it'll help us catch a little bug or two!
((("", startref="Dwait20")))
((("", startref="exp20")))
((("", startref="imp20")))




.Lessons Learned
*******************************************************************************

Decorators are nice::
    Decorators can be a great way of abstracting out
    different levels of concerns.
    They let us write our test assertions
    without having to think about waits at the same time.
    ((("decorators", "benefits of")))

De-duplicate your FTs, with caution::
    Every single FT doesn't need to test every single part of your application.
    In our case, we wanted to avoid going through the full login process for
    every FT that needs an authenticated user, so we used a test fixture to
    "cheat" and skip that part. You might find other things you want to skip
    in your FTs.  A word of caution, however: functional tests are there to
    catch unpredictable interactions between different parts of your
    application, so be wary of pushing de-duplication to the extreme.
    ((("duplication, eliminating")))

Test fixtures::
    Test fixtures refers to test data that needs to be set up as a precondition
    before a test is run--often this means populating the database with some
    information, but as we've seen (with browser cookies), it can involve other
    types of preconditions.
    ((("test fixtures")))

Avoid JSON fixtures::
    Django makes it easy to save and restore data from the database
    in JSON format (and others) using the `dumpdata` and `loaddata` management commands.
    I would tend to recommend against them,
    as they are painful to manage when your database schema changes.
    Use the ORM, with some nicely named helper functions instead.
    ((("JSON fixtures")))
    ((("dumpdata command")))
    ((("loaddata command")))
    ((("fixtures", "JSON fixtures")))

*******************************************************************************
